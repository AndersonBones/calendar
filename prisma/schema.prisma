generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(uuid())
  username      String             @unique
  name          String
  created_at    DateTime           @default(now())
  avatar_url    String?
  email         String?            @unique
  bio           String?            @db.Text
  accounts      Account[]
  sessions      Session[]
  timeIntervals UserTimeInterval[]

  @@map("users")
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?
  user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@index([user_id], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model UserTimeInterval {
  id                    String @id @default(uuid())
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int
  user_id               String
  user                  User   @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "user_time_intervals_user_id_fkey")
  @@map("user_time_intervals")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Scheduling {
  id           String   @id @default(uuid())
  date         DateTime
  name         String
  email        String
  observations String?
  created_at   DateTime @default(now())
  user_id      String

  @@index([user_id], map: "schedulings_user_id_fkey")
  @@map("schedulings")
}

model Session {
  id            String   @id @default(uuid())
  session_token String   @unique(map: "Session_session_token_key")
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "Session_user_id_fkey")

  @@index([user_id], map: "Session_user_id_fkey")
  @@map("sessions")
}
